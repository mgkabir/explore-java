******
What is Optional in Java 8? What is the use of Optional? Give an example.

******
What is Spliterator in Java SE 8? Differences between Iterator and Spliterator in Java SE 8?

******
What is Diamond Problem in Inheritance? How Java 8 Solves this problem?

******
What is a functional interface? What is the usage of Functional interface ?

*****
How will you print 10 random positive integer numbers in a sorted way using java 8?

*************************************************************************************
What will be out put of the following code if run without any argument?

public class Hello {
	public static void main(String... args) {
		for(String arg:args)
		System.out.println("Hello "+arg);
	}
}

(A) NullPointerException
(B) There will be no output
(C) Program will not compile
(D) Will print Hello

*************************************************************************************
What will be output of the following program ?

public class Java8Spliterator {
	public static void main(String[] args) {
		Spliterator<String> split = Arrays.asList("Australia","Brazil").spliterator();
		split.tryAdvance(System.out::print);
		split.tryAdvance(System.out::print);
		split.tryAdvance(System.out::print);
	}
}

(A)AustraliaBrazil
(B)AustraliaAustralia
(C)NullpointerException
(D)Program will not compile


*************************************************************************************
What will be output of the following program ?

public class TryWithResource {
	/* words.txt file is accessible */
	public static void main(String[] args) throws IOException {
		try (BufferedReader br = new BufferedReader(new FileReader("src/main/resources/words.txt"))) {
			String line;
			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}
		}
	}
}

(A) The program will run correctly and print the contents of the words.txt 
(B) The program will not compile because there is no finally block
(C) The program will not compile because resource needs to be closed
(D) The program will not compile because there is no catch block

*************************************************************************************
What will be the result of executing this code segment?

Stream.of("ace ", "jack ", "queen ", "king ", "joker ")
	.mapToInt(card -> card.length())
	.filter(len -> len > 3)
	.peek(System.out::print)
	.limit(2);
	
(A)  jack queen king joker
(B)  jack queen
(C)  king joker
(D)  This code segment does not print anything on the console


*************************************************************************************
Choose the correct option based on this program:

import java.util.stream.Stream;
public class Reduce {
	public static void main(String []args) {
	Stream<String> words = Stream.of("one", "two", "three");
	int len = words.mapToInt(String::length).reduce(0, (len1, len2) -> len1 + len2);
	System.out.println(len);
	}
}

(A) This program does not compile and results in compiler error(s)
(B) This program prints: onetwothree
(C) This program prints: 11
(D) This program throws an IllegalArgumentException

*************************************************************************************
Choose the correct option for this code snippet:

public static void main(String []files) {
	try (FileReader inputFile = new FileReader(new File(files[0]))) { // #1
		inputFile.close(); // #2
	}
	catch (FileNotFoundException | IOException e) { // #3
		e.printStackTrace();
	}
}

(A) Code snippet will compile without any errors
(B) Compiler will report an error at statement marked with the comment #1
(C) Compiler will report an error at statement marked with the comment #2
(D) Compiler will report an error at statement marked with the comment #3

*************************************************************************************

For the following enumeration definition, which one of the following prints the value 2 in the console?

	enum Pets { Cat, Dog, Parrot, Chameleon };

(A) System.out.print(Pets.Parrot.ordinal());
(B) System.out.print(Pets.Parrot);
(C) System.out.print(Pets.indexAt("Parrot"));
(D) System.out.print(Pets.Parrot.value());
(E) System.out.print(Pets.Parrot.getInteger());

*************************************************************************************

Select all the statements that are true about streams (supported in java.util.stream.Stream interface)?

(A) Computation on source data is performed in a stream only when the terminal
	operation is initiated, i.e., streams are “lazy”
(B) Once a terminal operation is invoked on a stream, it is considered consumed
	and cannot be used again
(C) Once a stream is created as a sequential stream, its execution mode cannot
	be changed to parallel stream (and vice versa)
(D) If the stream source is modified when the computation in the stream is being
	performed, then it may result in unpredictable or erroneous results

*************************************************************************************

Which of the following are functional interfaces? (Select all that apply.)

(A)	@FunctionalInterface
	interface Foo {
		void execute();
	}
	
(B)	@FunctionalInterface
	interface Foo {
		void execute();
		boolean equals(Object arg0);
	}
	
(C)	@FunctionalInterface
	interface Foo {
		boolean equals(Object arg0);
	}

(D)	interface Foo{}

*************************************************************************************

Choose the correct option based on this code segment:

	Path path = Paths.get("file.txt");
	// READ_FILE
	lines.forEach(System.out::println);
	
	Assume that a file named “file.txt” exists in the directory in which this code
	segment is run and has the content “hello”. Which one of these options can
	be replaced by the text READ_FILE that will successfully read the “file.txt”
	and print “hello” on the console?

(A) List<String> lines = Files.lines(path);
(B) Stream<String> lines = Files.lines(path);
(C) Stream<String> lines = File.readLines(path);
(D) Stream<String> lines = Files.readAllLines(path);

================================================ Problem Solving ================================================

1. Warehouse
	* Total number of Items in all the warehouses.
2. WordStats
	* Total # of words that has more than 7 characters.
	* Average length of all the words
	* List top 5 frequently used words